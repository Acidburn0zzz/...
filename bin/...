#!/usr/bin/env perl
# use XXX;use YAML;use YAML::Loader;
# Next line removes site dirs, so we don't pull in non-core modules.
BEGIN { @INC = grep not(/\bsite/), @INC }

my $usage = <<'...';

                ... - The Unix Dot File Manager

Usage: ... [options] command

Commands:
    backup - Backup all the dot files that would be changed by 'install'.

    install - Copy or link all the dot files into your $HOME directory.

    list - List all the full paths of the files that would be installed.

    status - Get change status of all the dot repositories.

    update - Fetch changes from all the dot repositories.

    upgrade - Do update and then install.

    restore - Restore a backup.

    remove - DELETE all the dot files in $HOME that would be installed!!!

Options:
    -v --version    Print the version and exit.
    -h -?           Print this help and exit.

For complete documentation, run: 'perldoc ...'

...

use strict;

# Load inlined modules. Can't read DATA in BEGIN block so do it manually.
BEGIN {
    eval do {
        open I, $0 or die;
        local $/; $_ = <I>; s/^.*\n__DATA__\n//s or die; $_;
    } or die;
}

# Load modules:
use YAML::Tiny;
use File::Path;
# use Getopt::Long;

my $VERSION = '1.0.0';

# State variables
my $home_dir;       # $HOME env
my $command;        # backup, install, etc
my $handler;        # Class method to call
my $root_dir;       # ~/.../
my $conf_file;      # ~/.../conf
my $config;         # Config hash
my $timestamp;      # Time stamp
my $restore_from;   # Directory to restore from

TOP: {
    my $class = __PACKAGE__;
    $class->parse_command_line();
    $class->setup() unless $command =~ /^(help|version)$/;
    $class->$handler();
}

sub parse_command_line {
    my $class = shift;
    if (@ARGV == 0) {
        $command = 'help';
    }
    elsif ($ARGV[0] =~ /^(-\?|-h|--help)$/) {
        $command = 'help';
    }
    elsif ($ARGV[0] =~ /^(-v|--version)$/) {
        $command = 'version'
    }
    elsif ($ARGV[0] eq 'ls') {
        $command = 'list'
    }
    elsif ($ARGV[0] eq 'st') {
        $command = 'status'
    }
    elsif ($ARGV[0] eq 'rm') {
        $command = 'remove'
    }
    elsif ($ARGV[0] =~ /^-/) {
        die "Error: '$ARGV[0]' is an invalid option\n";
    }
    else {
        $command = $ARGV[0];
        if ($command eq 'restore') {
            $restore_from = splice @ARGV, 1, 1
                or die "Error: 'restore' command requires a backup directory argument";
        }
    }
    if (@ARGV > 1) {
        die "Error: invalid usage. Try: '... -h'.\n";
    }
    $handler = "handle_$command";
    die "Error: unsupported command '$command'\n"
        unless $class->can($handler);
}

sub setup {
    my $class = shift;

    $home_dir = $ENV{HOME} or die "Error: \$HOME not set\n";
    $root_dir = "$home_dir/...";
    -d $root_dir or die "Error: $root_dir is not a directory\n";
    $conf_file = "$root_dir/conf";
    -f $conf_file or die <<"...";
Error: $conf_file does not exist.

You should copy $root_dir/conf.example to $conf_file
and edit appropriately.

...
    $config = YAML::Tiny::LoadFile($conf_file);

    $config->{dot_paths_base} ||= 'src';

    die "Error: 'dot_paths' not defined in $conf_file\n"
        unless defined $config->{dot_paths};
    die "Error: 'dot_paths' needs to be a sequence of mappings.\n"
        if ref($config->{dot_paths}) ne 'ARRAY' or
        not(@{$config->{dot_paths}}) or
        grep {ref ne 'HASH'} @{$config->{dot_paths}};
    die "Error: each dot_path entry must have a 'path' value\n"
        if grep {not defined $_->{path}} @{$config->{dot_paths}};

    $config->{auto_backup} =
        not(exists($config->{auto_backup})) ? 1 :
        $config->{auto_backup} =~ /^(on|true|1)$/ ? 1 :
        $config->{auto_backup} =~ /^(off|false|0)$/ ? 0 :
        die "Error: invalid value for conf setting 'auto_backup'\n";

    $config->{install_method} ||= 'link';
    die "Error: invalid value for conf setting 'install_method'\n"
        unless $config->{install_method} =~ /^(link|symlink|copy)$/;

    my ($sec, $min, $hour, $day, $mon, $year) = localtime(time);
    $year += 1900;
    $mon++;
    $timestamp = sprintf "%04d%02d%02d-%02d%02d%02d", $year, $mon, $day, $hour, $min, $sec;
}

sub handle_help {
    my $class = shift;
    print $usage;
}

sub handle_version {
    my $class = shift;
    print "This is '...' version '$VERSION'\n\n";
}

sub handle_backup {
    my $class = shift;
    my $quiet = shift or 0;
    my $backup_dir = "$root_dir/backup/$timestamp";
    my $backup_list_file = "$root_dir/tmp/$timestamp-backup-list";
    print "Backing up your dot files to $backup_dir/\n";
    open F, "> $backup_list_file";
    my $n = 0;
    for my $file (sort keys %{$class->_all_files}) {
        next unless -e "$home_dir/$file";
        $n++;
        print "$file\n" unless $quiet;
        print F "$file\n";
    }
    close F;
    my $cmd = "(cd $home_dir; cat $backup_list_file | cpio -dump $backup_dir)";
    $class->_run_sys($cmd);
    print "Backed up $n dot files to $backup_dir\n";
}

sub handle_install {
    my $class = shift;
    $class->handle_backup('quiet') if $config->{auto_backup};
    print "Installing your dot files:\n";
    my $all_files = $class->_all_files;
    my $method = $config->{install_method};
    my $n = 0;
    my $type =
        $method eq 'copy' ? "f" :
        $method eq 'link' ? "l" :
        $method eq 'symlink' ? "s" :
        die "Invalid install method '$method'";
    for my $file (sort keys %$all_files) {
        my $src = "$all_files->{$file}/$file";
        my $dst = "$home_dir/$file";
        next if $class->_up_to_date($src, $dst, $type);
        $n++;
        my $dir = $dst;
        $dir =~ s/(.*\/).*/$1/;
        if (not -d $dir) {
            File::Path::mkpath($dir) >= 1 or die "Can't make path '$dir'";
        }
        unlink $dst;
        my $cmd =
            $method eq 'copy' ? "cp $src $dst" :
            $method eq 'link' ? "ln $src $dst" :
            $method eq 'symlink' ? "ln -s $src $dst" :
            die "Invalid install method '$method'";
        $class->_run_sys($cmd);
    }
    print "Installed $n new dot files\n";
}

sub handle_list {
    my $class = shift;
    my $all_files = $class->_all_files;
    for my $file (sort keys %$all_files) {
        my $path = $all_files->{$file};
        print "$path/$file\n";
    }
}

sub handle_update {
    my $class = shift;
    print "Updating your `...` system and dot files:\n";
    for my $dir ($root_dir, $class->_all_dot_paths) {
        next unless -d "$dir/.git";
        my $cmd = "(cd $dir; git pull)";
        $class->_run_sys($cmd);
    }
}

sub handle_status {
    my $class = shift;
    for my $dir ($root_dir, $class->_all_dot_paths) {
        next unless -d "$dir/.git";
        my $cmd = "(cd $dir; git status)";
        $class->_run_sys($cmd);
    }
}

sub handle_upgrade {
    my $class = shift;
    $class->handle_update;
    $class->handle_install;
}

sub handle_restore {
    my $class = shift;
    die "'$restore_from' is not a backup directory"
        unless -d $restore_from;

    $class->handle_backup('quiet') if $config->{auto_backup};
    print "Restoring your dot files from $restore_from\n";
    my $cmd = "(cd $restore_from; find . | cpio -dump $home_dir)";
    $class->_run_sys($cmd);
    print "Restore complete.\n";
}

sub handle_remove {
    my $class = shift;
    $class->handle_backup('quiet') if $config->{auto_backup};
    print "Removing all your installed dot files:\n";
    my $all_files = $class->_all_files;
    my $n = 0;
    chdir $home_dir;
    for my $file (sort keys %$all_files) {
        if (-e $file) {
            my $cmd = "rm -f $file";
            $class->_run_sys($cmd);
            $n++;
        }
        if ((my $dir = $file) =~ s!(.*)/.*!$1!) {
            rmdir $dir;
        }
    }
    print "Deleted $n dot files\n";
}

sub _run_sys {
    my $class = shift;
    my $cmd = shift;
    print "> $cmd\n";
    system($cmd) == 0 or die "Error: previous system command failed\n";
}

sub _up_to_date {
    my $class = shift;
    my $src = shift;
    my $dst = shift;
    my $type = shift;
    die "Error: '$src' file does not exist" unless -f $src;
    return 0 if not -e $dst;
    if (-l $dst) {
        return 0 if $type =~ /^[fs]/;
        return readlink($dst) eq $src;
    }
    return 0 if -s $dst != -s $src;
    open S, $src or die;
    open D, $dst or die;
    local $/;
    return <S> eq <D>;
}

sub _all_dot_paths {
    my $class = shift;
    my @paths;
    for my $entry (@{$config->{dot_paths}}) {
        my $path = $entry->{path};
        if ($path !~ /^\//) {
            $path = "$config->{dot_paths_base}/$path";
        }
        if ($path !~ /^\//) {
            $path = "$root_dir/$path";
        }
        die "Error: can't resolve path for '" . $entry->{path} . "'\n"
            unless $path =~ /^\//;
        die "Error: '$path' is not a directory\n"
            unless -d $path;
        push @paths, $path;
    }
    return @paths;
}

sub _all_files {
    my $class = shift;
    my $all_files = {};
    for my $path ($class->_all_dot_paths) {
        for my $file (`(cd $path; find . -type f -o -type l)`) {
            $file =~ s!^\./!!;
            chomp($file);
            next if $file =~ /^\.git\//;
            next if $file =~ /^README$/;

            # next unless $file =~ /^(?:\.|bin\/)/;
            # XXX Temporary Socialtext ignores:
            next if $file =~ /^Makefile$/;
            next if $file =~ /\.html$/;
            next if $file =~ /stconfig-setup$/;

            $all_files->{$file} ||= $path;
        }
    }
    return $all_files;
}

=encoding utf8

=head1 NAME ...

Unix dot file management and sharing

=head1 QUICK INSTALL

Just run these 2 commands for a basic ... setup. 

    > git clone git://github.com/ingydotnet/....git
    > ./.../...

=head1 SYNOPSIS

NOTE: In the following lines, '> ' is a command line prompt, and
      C<'...'> is the literal name of this program.

    > ... help                  # Get help
    > ... backup                # Backup your old dot files
    > ... list                  # List the source files that will install
    > ... install               # Install your dot files
    > ... update                # Update your dot files
    > ... upgrade               # Do update and then install.
    > ... status                # Check status of your dot file repos
    > ... remove                # Remove all installed dot files
    > ... restore ~/.../backup/20101112-235947/

=head1 DESCRIPTION

Unix dot files do not get the care they deserve. They quietly make our
computers work comfortably for us, and yet we toss them about carelessly
from machine to machine. We make a tweak here and an addition there,
without keeping them all properly groomed and in sync.

DotDotDot (aka C<...>) is a toolset for managing sets of Unix dot files and
configuring them for a given machine. The files usually come from
various source control repositories (like git or svn). You can use other
people's repositories, or make your own, or both. You can share your
repositories with others on hosting sites like GitHub, and also keep you
private settings in repositories on your private server.

DotDotDot takes these concerns into account:

    * You have multiple machines with varying requirements
    * Some of your setting are private
    * You might work as multiple users

DotDotDot is a great way to share settings on an agile development team
at your work place. When you pair program, you know that you can expect
common commands to work on a coworker's shell, but both of you can also
have your personal settings too.

Also, with DotDotDot, you can easy try new groups of settings, and then
restore to your previous settings when you are done.

DotDotDot installs a command line program called C<...> (yes, literally
three period characters). It does all the actions you will need to keep
your dot files a big happy family.

=head1 PREREQUISITES

The C<...> comand requires the following standard Unix tools in your PATH:

    * perl (any old version since 1998)
    * cat
    * cp
    * cpio
    * rm

You'll need one or more collections of dot files. Here's a few:

    * git://github.com/ingydotnet/dotdotdot.git
    * git://github.com/ingydotnet/ingy-dots.git
    * git://github.com/socialtext/stconfig.git

You can also make your own repository from one of your current machine's
configuration. See below.

=head1 INSTALLATION

To install "...", run these commands in your Unix shell:

    > cd $HOME
    > git clone git://github.com/ingydotnet/....git
    > cd .../src
    > # Get collections of dot files from various places
    > git clone git://github.com/ingydotnet/dotdotdot.git
    > git clone git://github.com/ingydotnet/ingy-dots.git personal
    > svn checkout your/svn/dot/file/repo private
    > cd ..
    > cp conf.example conf
    > vim conf              # Edit the ... configuration file
    > cd $HOME
    > .../bin/... -h        # Show ... help info
    > .../bin/... backup    # Backup your existing dot files
    > .../bin/... install   # Install your new dot files
    > exec bash
    > ... upgrade

=head1 LINKS

There are 3 possible ways to install your dot files:

    * hardlink to source (default)
    * symlink to source
    * copy from source

You can change this with the C<install_method> configuration setting.

Using links is preferable. That way if you change a dot file in your
home directory, it gets changed in its source repository. Then you can
push/pull changes upstream, and share them with your other machines and
with the world.

Hard links are visially quiet, and symlinks are noisy. Your choice. Use
copy when you don't want changes in $HOME to change files in your repo.

=head1 BACKUPS

DotDotDot has a command to make a backup of all the files it would
replace on the install command.

If you have the C<auto_backup> option set in your config file (this is
the default value; you would have to actually turn it off to disable
it), then DotDotDot will make a backup of your files every time you run
another command that might change your dot files.

Backups are just timestamp named directories under C<$HOME/.../backup/>.
Like this:

    /home/ingy/.../backup/20101121-094620

You can restore your dot files from a backup with the
C<... restore directory-name> command.

=head2 Using Backup to Make a New Repository

If you are new to DotDotDot and want to take your dot files from one
machine, make them into a repository and share them with your other
machines, DotDotDot makes that easy. Just follow these steps:

    > ... backup
    Backed up 69 dot files to /home/ingy/.../backup/20101121-094620
    > cd ~/...
    > mv backup/20101121-094620 src/my-dots
    > # Add C<my-dots> to C<dot_paths> in the C<conf> file.
    > ... remove    # Delete all your dot files from $HOME
    > ... install   # Reinstall them (as links!)
    > cd src/my-dots
    > git init
    > git add .
    > git commit -m 'first commit'
    > git remote add origin <url-to-upstream-repo>
    > git push origin master

=head1 CREDIT

This work is based on my experience working at Socialtext and their
"stconfig" common settings: http://github.com/socialtext/stconfig

=head1 AVAILABILITY

This project is currently available at: http://github.com/ingydotnet/...

=head1 AUTHOR

Ingy döt Net <ingy@cpan.org>

=head1 COPYRIGHT

Copyright (c) 2010. Ingy döt Net.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

See http://www.perl.com/perl/misc/Artistic.html

=cut

__DATA__
# Inlined and stripped down http://search.cpan.org/~adamk/YAML-Tiny-1.44/
package YAML::Tiny;

use strict;

# UTF Support?
sub HAVE_UTF8 () { $] >= 5.007003 }
BEGIN {
        if ( HAVE_UTF8 ) {
                # The string eval helps hide this from Test::MinimumVersion
                eval "require utf8;";
                die "Failed to load UTF-8 support" if $@;
        }

        # Class structure
        require 5.004;
        require Exporter;
        require Carp;
        $YAML::Tiny::VERSION   = '1.44';
        @YAML::Tiny::ISA       = qw{ Exporter  };
        @YAML::Tiny::EXPORT    = qw{ Load Dump };
        @YAML::Tiny::EXPORT_OK = qw{ LoadFile DumpFile freeze thaw };

        # Error storage
        $YAML::Tiny::errstr    = '';
}

# The character class of all characters we need to escape
# NOTE: Inlined, since it's only used once
# my $RE_ESCAPE = '[\\x00-\\x08\\x0b-\\x0d\\x0e-\\x1f\"\n]';

# Printed form of the unprintable characters in the lowest range
# of ASCII characters, listed by ASCII ordinal position.
my @UNPRINTABLE = qw(
        z    x01  x02  x03  x04  x05  x06  a
        x08  t    n    v    f    r    x0e  x0f
        x10  x11  x12  x13  x14  x15  x16  x17
        x18  x19  x1a  e    x1c  x1d  x1e  x1f
);

# Printable characters for escapes
my %UNESCAPES = (
        z => "\x00", a => "\x07", t    => "\x09",
        n => "\x0a", v => "\x0b", f    => "\x0c",
        r => "\x0d", e => "\x1b", '\\' => '\\',
);

# Special magic boolean words
my %QUOTE = map { $_ => 1 } qw{
        null Null NULL
        y Y yes Yes YES n N no No NO
        true True TRUE false False FALSE
        on On ON off Off OFF
};





#####################################################################
# Implementation

# Create an empty YAML::Tiny object
sub new {
        my $class = shift;
        bless [ @_ ], $class;
}

# Create an object from a file
sub read {
        my $class = ref $_[0] ? ref shift : shift;

        # Check the file
        my $file = shift or return $class->_error( 'You did not specify a file name' );
        return $class->_error( "File '$file' does not exist" )              unless -e $file;
        return $class->_error( "'$file' is a directory, not a file" )       unless -f _;
        return $class->_error( "Insufficient permissions to read '$file'" ) unless -r _;

        # Slurp in the file
        local $/ = undef;
        local *CFG;
        unless ( open(CFG, $file) ) {
                return $class->_error("Failed to open file '$file': $!");
        }
        my $contents = <CFG>;
        unless ( close(CFG) ) {
                return $class->_error("Failed to close file '$file': $!");
        }

        $class->read_string( $contents );
}

# Create an object from a string
sub read_string {
        my $class  = ref $_[0] ? ref shift : shift;
        my $self   = bless [], $class;
        my $string = $_[0];
        unless ( defined $string ) {
                return $self->_error("Did not provide a string to load");
        }

        # Byte order marks
        # NOTE: Keeping this here to educate maintainers
        # my %BOM = (
        #     "\357\273\277" => 'UTF-8',
        #     "\376\377"     => 'UTF-16BE',
        #     "\377\376"     => 'UTF-16LE',
        #     "\377\376\0\0" => 'UTF-32LE'
        #     "\0\0\376\377" => 'UTF-32BE',
        # );
        if ( $string =~ /^(?:\376\377|\377\376|\377\376\0\0|\0\0\376\377)/ ) {
                return $self->_error("Stream has a non UTF-8 BOM");
        } else {
                # Strip UTF-8 bom if found, we'll just ignore it
                $string =~ s/^\357\273\277//;
        }

        # Try to decode as utf8
        utf8::decode($string) if HAVE_UTF8;

        # Check for some special cases
        return $self unless length $string;
        unless ( $string =~ /[\012\015]+\z/ ) {
                return $self->_error("Stream does not end with newline character");
        }

        # Split the file into lines
        my @lines = grep { ! /^\s*(?:\#.*)?\z/ }
                    split /(?:\015{1,2}\012|\015|\012)/, $string;

        # Strip the initial YAML header
        @lines and $lines[0] =~ /^\%YAML[: ][\d\.]+.*\z/ and shift @lines;

        # A nibbling parser
        while ( @lines ) {
                # Do we have a document header?
                if ( $lines[0] =~ /^---\s*(?:(.+)\s*)?\z/ ) {
                        # Handle scalar documents
                        shift @lines;
                        if ( defined $1 and $1 !~ /^(?:\#.+|\%YAML[: ][\d\.]+)\z/ ) {
                                push @$self, $self->_read_scalar( "$1", [ undef ], \@lines );
                                next;
                        }
                }

                if ( ! @lines or $lines[0] =~ /^(?:---|\.\.\.)/ ) {
                        # A naked document
                        push @$self, undef;
                        while ( @lines and $lines[0] !~ /^---/ ) {
                                shift @lines;
                        }

                } elsif ( $lines[0] =~ /^\s*\-/ ) {
                        # An array at the root
                        my $document = [ ];
                        push @$self, $document;
                        $self->_read_array( $document, [ 0 ], \@lines );

                } elsif ( $lines[0] =~ /^(\s*)\S/ ) {
                        # A hash at the root
                        my $document = { };
                        push @$self, $document;
                        $self->_read_hash( $document, [ length($1) ], \@lines );

                } else {
                        Carp::croak("YAML::Tiny failed to classify the line '$lines[0]'");
                }
        }

        $self;
}

# Deparse a scalar string to the actual scalar
sub _read_scalar {
        my ($self, $string, $indent, $lines) = @_;

        # Trim trailing whitespace
        $string =~ s/\s*\z//;

        # Explitic null/undef
        return undef if $string eq '~';

        # Single quote
        if ( $string =~ /^\'(.*?)\'(?:\s+\#.*)?\z/ ) {
                return '' unless defined $1;
                $string = $1;
                $string =~ s/\'\'/\'/g;
                return $string;
        }

        # Double quote.
        # The commented out form is simpler, but overloaded the Perl regex
        # engine due to recursion and backtracking problems on strings
        # larger than 32,000ish characters. Keep it for reference purposes.
        # if ( $string =~ /^\"((?:\\.|[^\"])*)\"\z/ ) {
        if ( $string =~ /^\"([^\\"]*(?:\\.[^\\"]*)*)\"(?:\s+\#.*)?\z/ ) {
                # Reusing the variable is a little ugly,
                # but avoids a new variable and a string copy.
                $string = $1;
                $string =~ s/\\"/"/g;
                $string =~ s/\\([never\\fartz]|x([0-9a-fA-F]{2}))/(length($1)>1)?pack("H2",$2):$UNESCAPES{$1}/gex;
                return $string;
        }

        # Special cases
        if ( $string =~ /^[\'\"!&]/ ) {
                Carp::croak("YAML::Tiny does not support a feature in line '$lines->[0]'");
        }
        return {} if $string =~ /^{}(?:\s+\#.*)?\z/;
        return [] if $string =~ /^\[\](?:\s+\#.*)?\z/;

        # Regular unquoted string
        if ($string !~ /^[>|]/) {
            Carp::croak("YAML::Tiny found illegal characters in plain scalar: '$string'") if
                $string =~ /^(?:-(?:\s|$)|[\@\%\`])/ or
                $string =~ /:(?:\s|$)/;
            $string =~ s/\s+#.*\z//;
            return $string
        }

        # Error
        Carp::croak("YAML::Tiny failed to find multi-line scalar content") unless @$lines;

        # Check the indent depth
        $lines->[0]   =~ /^(\s*)/;
        $indent->[-1] = length("$1");
        if ( defined $indent->[-2] and $indent->[-1] <= $indent->[-2] ) {
                Carp::croak("YAML::Tiny found bad indenting in line '$lines->[0]'");
        }

        # Pull the lines
        my @multiline = ();
        while ( @$lines ) {
                $lines->[0] =~ /^(\s*)/;
                last unless length($1) >= $indent->[-1];
                push @multiline, substr(shift(@$lines), length($1));
        }

        my $j = (substr($string, 0, 1) eq '>') ? ' ' : "\n";
        my $t = (substr($string, 1, 1) eq '-') ? ''  : "\n";
        return join( $j, @multiline ) . $t;
}

# Parse an array
sub _read_array {
        my ($self, $array, $indent, $lines) = @_;

        while ( @$lines ) {
                # Check for a new document
                if ( $lines->[0] =~ /^(?:---|\.\.\.)/ ) {
                        while ( @$lines and $lines->[0] !~ /^---/ ) {
                                shift @$lines;
                        }
                        return 1;
                }

                # Check the indent level
                $lines->[0] =~ /^(\s*)/;
                if ( length($1) < $indent->[-1] ) {
                        return 1;
                } elsif ( length($1) > $indent->[-1] ) {
                        Carp::croak("YAML::Tiny found bad indenting in line '$lines->[0]'");
                }

                if ( $lines->[0] =~ /^(\s*\-\s+)[^\'\"]\S*\s*:(?:\s+|$)/ ) {
                        # Inline nested hash
                        my $indent2 = length("$1");
                        $lines->[0] =~ s/-/ /;
                        push @$array, { };
                        $self->_read_hash( $array->[-1], [ @$indent, $indent2 ], $lines );

                } elsif ( $lines->[0] =~ /^\s*\-(\s*)(.+?)\s*\z/ ) {
                        # Array entry with a value
                        shift @$lines;
                        push @$array, $self->_read_scalar( "$2", [ @$indent, undef ], $lines );

                } elsif ( $lines->[0] =~ /^\s*\-\s*\z/ ) {
                        shift @$lines;
                        unless ( @$lines ) {
                                push @$array, undef;
                                return 1;
                        }
                        if ( $lines->[0] =~ /^(\s*)\-/ ) {
                                my $indent2 = length("$1");
                                if ( $indent->[-1] == $indent2 ) {
                                        # Null array entry
                                        push @$array, undef;
                                } else {
                                        # Naked indenter
                                        push @$array, [ ];
                                        $self->_read_array( $array->[-1], [ @$indent, $indent2 ], $lines );
                                }

                        } elsif ( $lines->[0] =~ /^(\s*)\S/ ) {
                                push @$array, { };
                                $self->_read_hash( $array->[-1], [ @$indent, length("$1") ], $lines );

                        } else {
                                Carp::croak("YAML::Tiny failed to classify line '$lines->[0]'");
                        }

                } elsif ( defined $indent->[-2] and $indent->[-1] == $indent->[-2] ) {
                        # This is probably a structure like the following...
                        # ---
                        # foo:
                        # - list
                        # bar: value
                        #
                        # ... so lets return and let the hash parser handle it
                        return 1;

                } else {
                        Carp::croak("YAML::Tiny failed to classify line '$lines->[0]'");
                }
        }

        return 1;
}

# Parse an array
sub _read_hash {
        my ($self, $hash, $indent, $lines) = @_;

        while ( @$lines ) {
                # Check for a new document
                if ( $lines->[0] =~ /^(?:---|\.\.\.)/ ) {
                        while ( @$lines and $lines->[0] !~ /^---/ ) {
                                shift @$lines;
                        }
                        return 1;
                }

                # Check the indent level
                $lines->[0] =~ /^(\s*)/;
                if ( length($1) < $indent->[-1] ) {
                        return 1;
                } elsif ( length($1) > $indent->[-1] ) {
                        Carp::croak("YAML::Tiny found bad indenting in line '$lines->[0]'");
                }

                # Get the key
                unless ( $lines->[0] =~ s/^\s*([^\'\" ][^\n]*?)\s*:(\s+(?:\#.*)?|$)// ) {
                        if ( $lines->[0] =~ /^\s*[?\'\"]/ ) {
                                Carp::croak("YAML::Tiny does not support a feature in line '$lines->[0]'");
                        }
                        Carp::croak("YAML::Tiny failed to classify line '$lines->[0]'");
                }
                my $key = $1;

                # Do we have a value?
                if ( length $lines->[0] ) {
                        # Yes
                        $hash->{$key} = $self->_read_scalar( shift(@$lines), [ @$indent, undef ], $lines );
                } else {
                        # An indent
                        shift @$lines;
                        unless ( @$lines ) {
                                $hash->{$key} = undef;
                                return 1;
                        }
                        if ( $lines->[0] =~ /^(\s*)-/ ) {
                                $hash->{$key} = [];
                                $self->_read_array( $hash->{$key}, [ @$indent, length($1) ], $lines );
                        } elsif ( $lines->[0] =~ /^(\s*)./ ) {
                                my $indent2 = length("$1");
                                if ( $indent->[-1] >= $indent2 ) {
                                        # Null hash entry
                                        $hash->{$key} = undef;
                                } else {
                                        $hash->{$key} = {};
                                        $self->_read_hash( $hash->{$key}, [ @$indent, length($1) ], $lines );
                                }
                        }
                }
        }

        return 1;
}

# Save an object to a file
sub write {
        my $self = shift;
        my $file = shift or return $self->_error('No file name provided');

        # Write it to the file
        open( CFG, '>' . $file ) or return $self->_error(
                "Failed to open file '$file' for writing: $!"
                );
        print CFG $self->write_string;
        close CFG;

        return 1;
}

# Save an object to a string
sub write_string {
        my $self = shift;
        return '' unless @$self;

        # Iterate over the documents
        my $indent = 0;
        my @lines  = ();
        foreach my $cursor ( @$self ) {
                push @lines, '---';

                # An empty document
                if ( ! defined $cursor ) {
                        # Do nothing

                # A scalar document
                } elsif ( ! ref $cursor ) {
                        $lines[-1] .= ' ' . $self->_write_scalar( $cursor, $indent );

                # A list at the root
                } elsif ( ref $cursor eq 'ARRAY' ) {
                        unless ( @$cursor ) {
                                $lines[-1] .= ' []';
                                next;
                        }
                        push @lines, $self->_write_array( $cursor, $indent, {} );

                # A hash at the root
                } elsif ( ref $cursor eq 'HASH' ) {
                        unless ( %$cursor ) {
                                $lines[-1] .= ' {}';
                                next;
                        }
                        push @lines, $self->_write_hash( $cursor, $indent, {} );

                } else {
                        Carp::croak("Cannot serialize " . ref($cursor));
                }
        }

        join '', map { "$_\n" } @lines;
}

sub _write_scalar {
        my $string = $_[1];
        return '~'  unless defined $string;
        return "''" unless length  $string;
        if ( $string =~ /[\x00-\x08\x0b-\x0d\x0e-\x1f\"\'\n]/ ) {
                $string =~ s/\\/\\\\/g;
                $string =~ s/"/\\"/g;
                $string =~ s/\n/\\n/g;
                $string =~ s/([\x00-\x1f])/\\$UNPRINTABLE[ord($1)]/g;
                return qq|"$string"|;
        }
        if ( $string =~ /(?:^\W|\s)/ or $QUOTE{$string} ) {
                return "'$string'";
        }
        return $string;
}

sub _write_array {
        my ($self, $array, $indent, $seen) = @_;
        if ( $seen->{refaddr($array)}++ ) {
                die "YAML::Tiny does not support circular references";
        }
        my @lines  = ();
        foreach my $el ( @$array ) {
                my $line = ('  ' x $indent) . '-';
                my $type = ref $el;
                if ( ! $type ) {
                        $line .= ' ' . $self->_write_scalar( $el, $indent + 1 );
                        push @lines, $line;

                } elsif ( $type eq 'ARRAY' ) {
                        if ( @$el ) {
                                push @lines, $line;
                                push @lines, $self->_write_array( $el, $indent + 1, $seen );
                        } else {
                                $line .= ' []';
                                push @lines, $line;
                        }

                } elsif ( $type eq 'HASH' ) {
                        if ( keys %$el ) {
                                push @lines, $line;
                                push @lines, $self->_write_hash( $el, $indent + 1, $seen );
                        } else {
                                $line .= ' {}';
                                push @lines, $line;
                        }

                } else {
                        die "YAML::Tiny does not support $type references";
                }
        }

        @lines;
}

sub _write_hash {
        my ($self, $hash, $indent, $seen) = @_;
        if ( $seen->{refaddr($hash)}++ ) {
                die "YAML::Tiny does not support circular references";
        }
        my @lines  = ();
        foreach my $name ( sort keys %$hash ) {
                my $el   = $hash->{$name};
                my $line = ('  ' x $indent) . "$name:";
                my $type = ref $el;
                if ( ! $type ) {
                        $line .= ' ' . $self->_write_scalar( $el, $indent + 1 );
                        push @lines, $line;

                } elsif ( $type eq 'ARRAY' ) {
                        if ( @$el ) {
                                push @lines, $line;
                                push @lines, $self->_write_array( $el, $indent + 1, $seen );
                        } else {
                                $line .= ' []';
                                push @lines, $line;
                        }

                } elsif ( $type eq 'HASH' ) {
                        if ( keys %$el ) {
                                push @lines, $line;
                                push @lines, $self->_write_hash( $el, $indent + 1, $seen );
                        } else {
                                $line .= ' {}';
                                push @lines, $line;
                        }

                } else {
                        die "YAML::Tiny does not support $type references";
                }
        }

        @lines;
}

# Set error
sub _error {
        $YAML::Tiny::errstr = $_[1];
        undef;
}

# Retrieve error
sub errstr {
        $YAML::Tiny::errstr;
}





#####################################################################
# YAML Compatibility

sub Dump {
        YAML::Tiny->new(@_)->write_string;
}

sub Load {
        my $self = YAML::Tiny->read_string(@_);
        unless ( $self ) {
                Carp::croak("Failed to load YAML document from string");
        }
        if ( wantarray ) {
                return @$self;
        } else {
                # To match YAML.pm, return the last document
                return $self->[-1];
        }
}

BEGIN {
        *freeze = *Dump;
        *thaw   = *Load;
}

sub DumpFile {
        my $file = shift;
        YAML::Tiny->new(@_)->write($file);
}

sub LoadFile {
        my $self = YAML::Tiny->read($_[0]);
        unless ( $self ) {
                Carp::croak("Failed to load YAML document from '" . ($_[0] || '') . "'");
        }
        if ( wantarray ) {
                return @$self;
        } else {
                # Return only the last document to match YAML.pm, 
                return $self->[-1];
        }
}





#####################################################################
# Use Scalar::Util if possible, otherwise emulate it

BEGIN {
        eval {
                require Scalar::Util;
                *refaddr = *Scalar::Util::refaddr;
        };
        eval <<'END_PERL' if $@;
# Failed to load Scalar::Util   
sub refaddr {
        my $pkg = ref($_[0]) or return undef;
        if (!!UNIVERSAL::can($_[0], 'can')) {
                bless $_[0], 'Scalar::Util::Fake';
        } else {
                $pkg = undef;
        }
        "$_[0]" =~ /0x(\w+)/;
        my $i = do { local $^W; hex $1 };
        bless $_[0], $pkg if defined $pkg;
        $i;
}
END_PERL

}

1;

$INC{'YAML/Tiny.pm'} = 'inlined';
